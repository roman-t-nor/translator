services:
    laravel.test:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: translator
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
            - '4200:4200'
        environment:
            WWWUSER: '${WWWUSER}'
            WWWGROUP: '${WWWGROUP}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - mysql
            - redis
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
networks:
    sail:
        driver: bridge
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local

##########################################################
# Steps:
# 1.  mkdir vander
# 2.  cd vander
# 3.  git clone git@github.com:vanderproject/vanderweb.git .
# 4.  copy/paste modified files
# 5.  cd vander-original
# 6.  docker compose up OR docker compose up --build

#       In DBeaver 
#       Create connection:
#        1. Server host: localhost:3306
#        2. Database: vander
#        3. Username: admin
#        4. Password: 12345
#        5. Local client: MySQL binaries
#        6. Connection > Driver Properties tab > allowPublicKeyRetrieval > true 
#        7. On vander db > context menu > Tools > Restore database    

# 7.  docker exec -it vander-original-laravel.test-1 sh
# 8.  composer install && npm i && npm run dev
# 10. chmod -R 777 storage bootstrap/cache
# 11. Xdebug: launch.json: "pathMappings": {"/var/www/html": "${workspaceFolder}"}, "hostname": "0.0.0.0"
##########################################################

##########################################################
# docker compose build - This will rebuild all services defined in your docker-compose.yml file.
# docker compose up --build - Rebuild and restart the containers
##########################################################

##########################################################
# To make ./vendor/bin/sail up -> sail up:
# cd ~
# nano .bashrc
# insert: alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'
# save file
##########################################################

##########################################################
# After updating your application's docker-compose.yml file, you should rebuild your container images:
# sail build --no-cache
# sail up
# sail build --no-cache && sail up -d
# sail restart
##########################################################

##########################################################
# Useful commands
# sail root-shell (to run commands under root)
# sail down -v (stop containers and remove volumes)
# ng serve --host 0.0.0.0
# ng build
# sail root-shell => usermod -aG www-data sail
# sail shell => id (OR whoami) => to check current user name and group
# id OR id -u OR id -g
# Xdebug: launch.json: "pathMappings": {"/var/www/html": "${workspaceFolder}"}, "hostname": "0.0.0.0"
##########################################################